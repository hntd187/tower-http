var N = null;var searchIndex = {};
searchIndex["tower_http"]={"doc":"","items":[[3,"AddOrigin","tower_http","Wraps an HTTP service, injecting authority and scheme on every request.",N,N],[0,"add_origin","","",N,N],[3,"AddOrigin","tower_http::add_origin","Wraps an HTTP service, injecting authority and scheme on every request.",N,N],[3,"Builder","","Configure an `AddOrigin` instance",N,N],[3,"BuilderError","","Errors that can happen when building an `AddOrigin`.",N,N],[0,"service","tower_http","",N,N],[3,"LiftService","tower_http::service","Wraps an `HttpService` instance, implementing `tower_service::Service`.",N,N],[3,"LiftServiceRef","","Wraps an `HttpService` reference, implementing `tower_service::Service`.",N,N],[8,"HttpService","","An HTTP service",N,N],[16,"ResponseBody","","Response payload.",0,N],[16,"Error","","Errors produced by the service.",0,N],[16,"Future","","The future response value.",0,N],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",0,[[["self"]],["poll"]]],[10,"call","","Process the request and return the response asynchronously.",0,N],[11,"lift","","Wrap the HttpService so that it implements tower_service::Service directly.",0,[[["self"]],["liftservice"]]],[11,"lift_ref","","Same as `lift` but operates on an HttpService reference.",0,[[["self"]],["liftserviceref"]]],[11,"poll_ready","","",1,[[["self"]],["poll"]]],[11,"call","","",1,N],[11,"poll_ready","","",2,[[["self"]],["poll"]]],[11,"call","","",2,N],[11,"new","tower_http::add_origin","Create a new `AddOrigin`",3,[[["t"],["scheme"],["authority"]],["addorigin"]]],[11,"scheme","","Return a reference to the HTTP scheme that is added to all requests.",3,[[["self"]],["scheme"]]],[11,"authority","","Return a reference to the HTTP authority that is added to all requests.",3,[[["self"]],["authority"]]],[11,"get_ref","","Returns a reference to the inner service.",3,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner service.",3,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self`, returning the inner service.",3,[[["self"]],["t"]]],[11,"poll_ready","","",3,[[["self"]],["result",["async"]]]],[11,"call","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"poll_ready","","",3,[[["self"]],["result",["async"]]]],[11,"make_service","","",3,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"poll_ready","","",3,[[["self"]],["result",["async"]]]],[11,"call","","",3,N],[11,"default","","",5,[[],["builder"]]],[11,"new","","Return a new, default builder",5,[[],["builder"]]],[11,"uri","","Set the URI to use as the origin for all requests.",5,[[["self"],["t"]],["builder"]]],[11,"build","","",5,[[["self"],["t"]],["result",["addorigin","buildererror"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"poll_ready","tower_http::service","",1,[[["self"]],["result",["async"]]]],[11,"call","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"poll_ready","","",2,[[["self"]],["result",["async"]]]],[11,"call","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]]],"paths":[[8,"HttpService"],[3,"LiftService"],[3,"LiftServiceRef"],[3,"AddOrigin"],[3,"BuilderError"],[3,"Builder"]]};
initSearch(searchIndex);
